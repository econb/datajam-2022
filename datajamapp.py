# -*- coding: utf-8 -*-
"""datajamapp

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wO-X-jIMnQKaLVq9b3zvKdONS53Ro7SU
"""

import pandas as pd
import numpy as np
import altair as alt
!pip install -U sentence-transformers
from sentence_transformers import SentenceTransformer, util
!pip install streamlit
import streamlit as st

st.title("DATAJAM CRC 2022")
st.markdown("**Temática**: Contenidos Audiovisuales  "+
"**Enunciado del reto**: ¿Qué estrategias pueden ser propuestas para promover la elección informada de los usuarios de televisión abierta a partir del contenido presentado en las parrillas de programación?  "+
"**Descripción del reto**: Proponer estrategias de visualización y comunicación de datos de los contenidos audiovisuales de la televisión abierta, buscando que los usuarios puedan tomar decisiones sobre los contenidos que desean consumir, tomando en consideración las similitudes o diferencias existentes entre las parrillas de programación presentadas.  "+
"**Tipo de reto**: Exploratorio  "+
"**Datos sugeridos**: Parrilla de programación televisión abierta")

@st.cache
def inicializar():
  # Lectura
  parrilla_file = "nuevaparrilla.csv" #"/content/drive/MyDrive/Colab Notebooks/DAJAM/nuevaparrilla.csv"
  parrilla = pd.read_csv(parrilla_file, sep=';')
  # Limpieza
  parrilla = parrilla.replace('ND', pd.NA)
  parrilla = parrilla.dropna(axis=0, subset=['PROGRAMA'])
  parrilla.loc[parrilla['TIPO'].isna(), 'TIPO'] = "";
  parrilla['FECHA'] = pd.to_datetime(parrilla['FECHA'])
  hora = [int(h[:2]) for h in parrilla['HORA_INICIO']]
  parrilla.insert(2, "Hora", hora, True)

  # Transformer
  myTransformer = SentenceTransformer('hiiamsid/sentence_similarity_spanish_es')

  # Embeddings
  programasTv = list(parrilla["PROGRAMA"]+' '+parrilla["TIPO"]) #list(parrilla["PROGRAMA"])
  programasTvEmbds = myTransformer.encode(programasTv, convert_to_numpy=True, batch_size=100, show_progress_bar=True)

  return(parrilla, myTransformer, programasTvEmbds)

parrilla, myTransformer, programasTvEmbds = inicializar()

#===================================================
termBusqueda = st.text_input("¿Qué programas de TV le gustaría ver?") 
#===================================================

# Embedding
busquedaEmbd= myTransformer.encode(termBusqueda, convert_to_numpy=True)
# Distancia coseno
similaridad = [float(util.pytorch_cos_sim(busquedaEmbd, ptvEmb)) for ptvEmb in programasTvEmbds]
# Indices de los programas mas similares
l = sorted(list(enumerate(similaridad)), key=lambda x:x[1], reverse=True)
ordenSimilaridad = list(list(zip(*l))[0])
# Filtrar los mas similares
umbral = np.quantile(similaridad, q=0.98)
n = sum(similaridad >= umbral)
masSimilares = ordenSimilaridad[0:n]
# Parrilla filtrada
parrillaviz = parrilla.iloc[masSimilares]
parrillaviz = parrillaviz[["FECHA","PROGRAMA","EMPRESA","HORA_INICIO","Hora"]]

# Visualizacion
source = parrillaviz
titulo = "Parrilla TV para '"+ termBusqueda+ "' (31 de marzo de 2022)"

grilla = alt.Chart(source, title=titulo).mark_rect().encode(
    alt.X('x:O', axis=None),
    alt.Y('Hora:O'),
    tooltip=["PROGRAMA","HORA_INICIO", "EMPRESA"],
#    color=alt.Color("EMPRESA", scale=alt.Scale(scheme='tableau20'), title="Canal")
).transform_window(
    x='rank()',
    groupby=["Hora"]
).properties(width=1000, height=550)

nombres = grilla.mark_text(
    size=9, color="white", baseline="bottom"
).transform_calculate(
    PROGRAMA2="[slice(datum.PROGRAMA, 0, 16),slice(datum.PROGRAMA, 16)]"
).encode(
    text="PROGRAMA2:O"
)

st.altair_chart(grilla + nombres, use_container_width=True)